%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Programmer:
%Date:
%Course:
%Teacher:
%Program Name:
%Descriptions:  Grid functions/procedures
/*
algorithm : shift grid rows down

loop
check for row starting from bottom

if row is full then record into an array 
else if row is non-empty, non-full, record into another array
else if row is empty, then end loop


loop through different rows up until highest index of non-empty, non-full array
if row # = row in array and row # < lowest row num in grid then shift grid values down
else if 
*/
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% drawGrid -> draws the grid onto screen
procedure drawGrid

var y : int := 0

    for i : 1..rowSize
    
    var x : int := xStart
    
	for j : 1..columnSize
	    
	    Draw.FillBox( x, y, x + SIZE, y + SIZE, grid( j, i ) )
	    Draw.Box (x, y, x + SIZE, y + SIZE, blue)
	    
	    x := x + SIZE
	    
	end for
	
	y := y + SIZE
    
    end for

end drawGrid

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% isFull -> checks if row is full
% @return boolean if row is full
function isFull( rowNum : int ) : boolean

for i : 1..columnSize

    if grid( i, rowNum ) = white
    then
    
    result false
    
    end if

end for

result true

end isFull

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% checkToClear -> checks if there is at least one line to clear
% @return boolean true or false if there is a line to clear
function checkToClear : boolean

for i : 1..rowSize

    if isFull( i )
    then
    
	result true
    
    end if

end for

result false

end checkToClear

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% playLineClear -> plays .wav file when line(s) is/are cleared
process playLineClear

    Music.PlayFile( "Sounds/clearLineSound.wav" )

end playLineClear

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% clearLine -> clears full line and updates grid
procedure clearLine

var i : int := 1
var numOfLinesCleared : int := 0

loop

    %checks if row is full
    if isFull( i )
    then
    
	for j : 1..columnSize
	
	   Draw.FillBox( SIZE * ( j - 1 ) + xStart, SIZE * ( i - 1 ), SIZE * j + xStart, SIZE * i, white )
	   Draw.Box( SIZE * ( j - 1 ) + xStart, SIZE * ( i - 1 ), SIZE * j + xStart, SIZE * i, blue )
	   Draw.FillOval( SIZE * ( j - 1 ) + xStart + SIZE div 2, SIZE * ( i - 1 ) + SIZE div 2, SIZE div 2, SIZE div 2, black )
 
       end for
       
       numOfLinesCleared := numOfLinesCleared + 1
       
    end if
    
       i := i + 1

exit when i = rowSize

end loop

if numOfLinesCleared > 0
then

    %insert explosion sound
    fork playLineCLear
    
    delay( 125 )
    clearedLines := clearedLines + numOfLinesCleared

end if

i := 1

loop
    
    %checks if row is full
    if isFull( i )
    then
   
    for j : i..rowSize - 1
    
	for k : 1..columnSize
	
	if i not = rowSize
	then
	
	grid( k, j ) := grid( k, j + 1 )
	
	end if

	end for
    
    end for

    for j : 1..columnSize
    
    grid( j, rowSize ) := white
    
    end for
    
    else
    
    i := i + 1
    
    end if
    
    exit when i = rowSize
    
end loop

end clearLine

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% drawHoldSquare -> draws white space where tetromino is held
procedure drawHoldSquare

    Draw.FillBox( holdX, holdY, holdX + holdSize, holdY + holdSize, white )
    Draw.Box( holdX, holdY, holdX + holdSize, holdY + holdSize, blue )

end drawHoldSquare

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% redrawGame -> redraws all components of game
procedure redrawGame

    drawTetrisBG
    displayScoreboard
    drawGrid
    drawHoldSquare
    
end redrawGame
